// Generated by CoffeeScript 1.7.1
var Profile, Q, _3Ajax, _3Model,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_3Model = require("3vot-model");

_3Ajax = require("3vot-model/lib/ajax");

Q = require("q");

Profile = (function(_super) {
  __extends(Profile, _super);

  function Profile() {
    return Profile.__super__.constructor.apply(this, arguments);
  }

  Profile.configure("Profile", "user_name", "marketing", "security", "contacts");

  Profile.extend(_3Ajax);

  Profile.extend(_3Ajax.Auto);

  Profile.query_key = "select id, user_name, security, marketing from profiles where security::json->>'public_dev_key' = $1";

  Profile.queryProfile = function(key) {
    var deferred, done, errorString, fail, query;
    errorString = "We could not find a profile with the provided key. Check Configuration in 3vot.json";
    deferred = Q.defer();
    done = function() {
      if (Profile.count() === 1) {
        return deferred.resolve(Profile.first());
      }
      return deferred.reject(errorString);
    };
    fail = function(error) {
      return deferred.reject(errorString + error);
    };
    query = {
      select: Profile.query_key,
      values: [key]
    };
    Profile.fetch({
      query: query
    }, {
      done: done,
      fail: fail
    });
    return deferred.promise;
  };

  return Profile;

})(_3Model.Model);

module.exports = Profile;

/*

_3Model = require("3vot-model")

_3Ajax = require("3vot-model/lib/ajax")

Q = require("q")

class Profile extends _3Model.Model
  @configure "Profile", "user_name", "marketing", "security", "contacts"
  @extend(_3Ajax);
  @extend(_3Ajax.Auto);

  @query_key: "select id, user_name, security from profiles where security::json->>'public_dev_key' = $1"

  @queryProfile: (key) ->
    errorString = "We could not find a profile with the provided key. Check Configuration in 3vot.json";
    deferred = Q.defer();

    done= () ->
      return deferred.resolve( Profile.first() ) if( Profile.count() == 1)
      deferred.reject(errorString)

    fail= ( error ) ->        
      deferred.reject( errorString + error )

    query =
      select: Profile.query_key
      values: [key]

    Profile.fetch( { query: query }, { done: done, fail: fail }  )

    return deferred.promise;

module.exports = Profile;

*/